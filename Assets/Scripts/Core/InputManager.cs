using System;
using UnityEngine;
using UnityEngine.InputSystem;

/// <summary>
/// Centralized input manager for the RTS game.
/// Uses Unity's Input System with a generated input actions class (RTSInputActions).
/// Provides static events so other systems can subscribe without direct references.
/// </summary>
public class InputManager : MonoBehaviour
{
    // Camera movement inputs
    public static event Action<Vector2> OnMoveInput;              // WASD/Arrow keys movement input
    public static event Action<float> OnZoomInput;                // Scroll wheel or pinch for zoom
    public static event Action<bool> OnRotateInput;                // Middle mouse button (or equivalent) for rotation
    public static event Action<bool> OnBoostInput;                 // Shift key (or equivalent) for movement speed boost

    // Mouse position and actions
    public static event Action<Vector2> OnPointerPositionChanged;  // Called whenever the pointer position changes
    public static event Action<Vector2> OnRightClick;              // Called when the player right-clicks
    public static event Action<Vector2> OnLeftClick;               // Called when the player left-clicks

    private RTSInputActions controls;                              // Input actions asset generated by Unity's Input System
    private Vector2 lastPointerPosition;                           // Stores the latest pointer position for click events

    private void Awake()
    {
        controls = new RTSInputActions(); // Initialize the input actions

        // --- Movement ---
        controls.Camera.Move.performed += ctx => OnMoveInput?.Invoke(ctx.ReadValue<Vector2>());
        controls.Camera.Move.canceled += ctx => OnMoveInput?.Invoke(Vector2.zero);

        // --- Zoom ---
        controls.Camera.Zoom.performed += ctx => OnZoomInput?.Invoke(ctx.ReadValue<float>());
        controls.Camera.Zoom.canceled += ctx => OnZoomInput?.Invoke(0f);

        // --- Rotation ---
        controls.Camera.Rotate.performed += ctx => OnRotateInput?.Invoke(true);
        controls.Camera.Rotate.canceled += ctx => OnRotateInput?.Invoke(false);

        // --- Boost ---
        controls.Camera.Boost.performed += ctx => OnBoostInput?.Invoke(true);
        controls.Camera.Boost.canceled += ctx => OnBoostInput?.Invoke(false);

        // --- Pointer Position ---
        controls.Camera.PointerPosition.performed += ctx =>
        {
            lastPointerPosition = ctx.ReadValue<Vector2>();
            OnPointerPositionChanged?.Invoke(lastPointerPosition);
        };

        // --- Right Click ---
        controls.Camera.RightClick.performed += ctx =>
        {
            OnRightClick?.Invoke(lastPointerPosition);
        };

        // --- Left Click ---
        controls.Camera.LeftClick.performed += ctx =>
        {
            OnLeftClick?.Invoke(lastPointerPosition);
        };
    }

    private void OnEnable() => controls.Enable();   // Enables the input system when this object is active
    private void OnDisable() => controls.Disable(); // Disables input to avoid leaks or ghost input when inactive
}
